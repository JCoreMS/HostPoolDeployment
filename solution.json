{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.14.85.62628",
      "templateHash": "91111899795711009"
    }
  },
  "parameters": {
    "_artifactsLocation": {
      "type": "string"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring"
    },
    "AppGroupName": {
      "type": "string"
    },
    "AppGroupType": {
      "type": "string",
      "allowedValues": [
        "Desktop",
        "RailApplications"
      ]
    },
    "AutomationAccountName": {
      "type": "string"
    },
    "Availability": {
      "type": "string",
      "metadata": {
        "description": "Set the desired availability / SLA with a pooled host pool.  Choose \"None\" if deploying a personal host pool."
      },
      "allowedValues": [
        "AvailabilitySet",
        "AvailabilityZones",
        "None"
      ]
    },
    "ComputeGalleryName": {
      "type": "string"
    },
    "ComputeGallerySubId": {
      "type": "string"
    },
    "ComputeGalleryRG": {
      "type": "string"
    },
    "ComputeGalleryImage": {
      "type": "string"
    },
    "CrossTenantRegister": {
      "type": "bool",
      "metadata": {
        "description": "If TRUE, Resource Group for Host Pool resources not required."
      }
    },
    "CrossTenantRegisterToken": {
      "type": "securestring"
    },
    "CustomRdpProperty": {
      "type": "string"
    },
    "DiskSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The storage SKU for the AVD session host disks.  Production deployments should use Premium_LRS."
      },
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS"
      ]
    },
    "DomainName": {
      "type": "string"
    },
    "DomainUser": {
      "type": "string"
    },
    "DomainPassword": {
      "type": "securestring"
    },
    "ResourceGroupHP": {
      "type": "string"
    },
    "HostPoolName": {
      "type": "string"
    },
    "ResourceGroupVMs": {
      "type": "string"
    },
    "HostPoolType": {
      "type": "string",
      "metadata": {
        "description": "These options specify the host pool type and depending on the type provides the load balancing options and assignment types."
      },
      "allowedValues": [
        "Pooled DepthFirst",
        "Pooled BreadthFirst",
        "Personal Automatic",
        "Personal Direct"
      ]
    },
    "WorkspaceName": {
      "type": "string"
    },
    "Location": {
      "type": "string"
    },
    "NewLogAnalyticsWS": {
      "type": "bool"
    },
    "LogAnalyticsWorkspaceName": {
      "type": "string"
    },
    "LogAnalyticsWorkspaceRetention": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The retention for the Log Analytics Workspace to setup the AVD Monitoring solution"
      },
      "minValue": 30,
      "maxValue": 730
    },
    "LogAnalyticsWorkspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "metadata": {
        "description": "The SKU for the Log Analytics Workspace to setup the AVD Monitoring solution"
      },
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ]
    },
    "LogAnalyticsSubId": {
      "type": "string"
    },
    "LogAnalyticsRG": {
      "type": "string"
    },
    "Monitoring": {
      "type": "bool"
    },
    "NumSessionHosts": {
      "type": "int"
    },
    "NumUsersPerHost": {
      "type": "int"
    },
    "Subnet": {
      "type": "string"
    },
    "Tags": {
      "type": "object"
    },
    "Timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('u')]"
    },
    "UpdateWindows": {
      "type": "bool"
    },
    "StartVmOnConnect": {
      "type": "bool"
    },
    "OUPath": {
      "type": "string"
    },
    "VmIndexStart": {
      "type": "int",
      "maxValue": 99
    },
    "VmPrefix": {
      "type": "string",
      "maxLength": 13
    },
    "ValidationEnvironment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The value determines whether the hostpool should receive early AVD updates for testing."
      }
    },
    "VirtualNetwork": {
      "type": "string",
      "metadata": {
        "description": "Virtual network for the AVD sessions hosts"
      }
    },
    "VirtualNetworkResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Virtual network resource group for the AVD sessions hosts"
      }
    },
    "VmPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Local administrator password for the AVD session hosts"
      }
    },
    "VmSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v4",
      "metadata": {
        "description": "The VM SKU for the AVD session hosts."
      }
    },
    "VmUsername": {
      "type": "string",
      "metadata": {
        "description": "The Local Administrator Username for the Session Hosts"
      }
    }
  },
  "variables": {
    "MaxResourcesPerTemplateDeployment": 79,
    "DivisionValue": "[div(parameters('NumSessionHosts'), variables('MaxResourcesPerTemplateDeployment'))]",
    "DivisionRemainderValue": "[mod(parameters('NumSessionHosts'), variables('MaxResourcesPerTemplateDeployment'))]",
    "SessionHostBatchCount": "[if(greater(variables('DivisionRemainderValue'), 0), add(variables('DivisionValue'), 1), variables('DivisionValue'))]",
    "MaxAvSetCount": 200,
    "DivisionAvSetValue": "[div(parameters('NumSessionHosts'), variables('MaxAvSetCount'))]",
    "DivisionAvSetRemainderValue": "[mod(parameters('NumSessionHosts'), variables('MaxAvSetCount'))]",
    "AvailabilitySetCount": "[if(greater(variables('DivisionAvSetRemainderValue'), 0), add(variables('DivisionAvSetValue'), 1), variables('DivisionAvSetValue'))]",
    "PooledHostPool": "[if(equals(split(parameters('HostPoolType'), ' ')[0], 'Pooled'), true(), false())]",
    "AvailabilitySetPrefix": "as-",
    "DeployVMsTo": "[if(empty(parameters('ResourceGroupVMs')), parameters('ResourceGroupHP'), parameters('ResourceGroupVMs'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('ResourceGroupHP')]",
      "location": "[parameters('Location')]"
    },
    {
      "condition": "[not(empty(parameters('ResourceGroupVMs')))]",
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('ResourceGroupVMs'))), parameters('ResourceGroupVMs'), 'none')]",
      "location": "[if(not(empty(parameters('Location'))), parameters('Location'), 'none')]"
    },
    {
      "condition": "[variables('PooledHostPool')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "linked_AutomationAccount_AVDHostPoolDeployment",
      "resourceGroup": "[parameters('ResourceGroupHP')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AutomationAccountName": {
            "value": "[parameters('AutomationAccountName')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "11356458460314992528"
            }
          },
          "parameters": {
            "AutomationAccountName": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts",
              "apiVersion": "2021-06-22",
              "name": "[parameters('AutomationAccountName')]",
              "location": "[parameters('Location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "sku": {
                  "name": "Free"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupHP'))]"
      ]
    },
    {
      "condition": "[and(and(variables('PooledHostPool'), equals(parameters('Availability'), 'AvailabilitySet')), not(parameters('CrossTenantRegister')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('linked_AvailabilitySets_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[parameters('ResourceGroupHP')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AvailabilitySetCount": {
            "value": "[variables('AvailabilitySetCount')]"
          },
          "AvailabilitySetPrefix": {
            "value": "[variables('AvailabilitySetPrefix')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "7188094569970961746"
            }
          },
          "parameters": {
            "AvailabilitySetCount": {
              "type": "int"
            },
            "AvailabilitySetPrefix": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "availabilitySet",
                "count": "[length(range(0, parameters('AvailabilitySetCount')))]"
              },
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2019-07-01",
              "name": "[format('{0}-{1}', parameters('AvailabilitySetPrefix'), range(0, parameters('AvailabilitySetCount'))[copyIndex()])]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "sku": {
                "name": "Aligned"
              },
              "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 2
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupHP'))]"
      ]
    },
    {
      "condition": "[not(parameters('CrossTenantRegister'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "linked_HostPoolDeployment",
      "resourceGroup": "[parameters('ResourceGroupHP')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AppGroupName": {
            "value": "[parameters('AppGroupName')]"
          },
          "AppGroupType": {
            "value": "[parameters('AppGroupType')]"
          },
          "ComputeGalleryImageId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ComputeGallerySubId'), parameters('ComputeGalleryRG')), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', parameters('ComputeGalleryName'), parameters('ComputeGalleryImage')), '/')[0], split(format('{0}/{1}', parameters('ComputeGalleryName'), parameters('ComputeGalleryImage')), '/')[1])]"
          },
          "CustomRdpProperty": {
            "value": "[parameters('CustomRdpProperty')]"
          },
          "DiskSku": {
            "value": "[parameters('DiskSku')]"
          },
          "DomainName": {
            "value": "[parameters('DomainName')]"
          },
          "HostPoolName": {
            "value": "[parameters('HostPoolName')]"
          },
          "HostPoolType": {
            "value": "[parameters('HostPoolType')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "NumUsersPerHost": {
            "value": "[parameters('NumUsersPerHost')]"
          },
          "StartVmOnConnect": {
            "value": "[parameters('StartVmOnConnect')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          },
          "ValidationEnvironment": {
            "value": "[parameters('ValidationEnvironment')]"
          },
          "VmPrefix": {
            "value": "[parameters('VmPrefix')]"
          },
          "VmSize": {
            "value": "[parameters('VmSize')]"
          },
          "WorkspaceName": {
            "value": "[parameters('WorkspaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "11163740222488837395"
            }
          },
          "parameters": {
            "AppGroupName": {
              "type": "string"
            },
            "AppGroupType": {
              "type": "string"
            },
            "CustomRdpProperty": {
              "type": "string"
            },
            "DiskSku": {
              "type": "string"
            },
            "DomainName": {
              "type": "string"
            },
            "HostPoolName": {
              "type": "string"
            },
            "HostPoolType": {
              "type": "string"
            },
            "WorkspaceName": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "NumUsersPerHost": {
              "type": "int"
            },
            "Tags": {
              "type": "object"
            },
            "Timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('u')]"
            },
            "StartVmOnConnect": {
              "type": "bool"
            },
            "ComputeGalleryImageId": {
              "type": "string"
            },
            "VmPrefix": {
              "type": "string"
            },
            "ValidationEnvironment": {
              "type": "bool"
            },
            "VmSize": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.DesktopVirtualization/hostPools",
              "apiVersion": "2021-03-09-preview",
              "name": "[parameters('HostPoolName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "hostPoolType": "[split(parameters('HostPoolType'), ' ')[0]]",
                "maxSessionLimit": "[parameters('NumUsersPerHost')]",
                "loadBalancerType": "[if(contains(parameters('HostPoolType'), 'Pooled'), split(parameters('HostPoolType'), ' ')[1], null())]",
                "validationEnvironment": "[parameters('ValidationEnvironment')]",
                "registrationInfo": {
                  "expirationTime": "[dateTimeAdd(parameters('Timestamp'), 'PT2H')]",
                  "registrationTokenOperation": "Update"
                },
                "preferredAppGroupType": "[parameters('AppGroupType')]",
                "customRdpProperty": "[parameters('CustomRdpProperty')]",
                "personalDesktopAssignmentType": "[if(contains(parameters('HostPoolType'), 'Personal'), split(parameters('HostPoolType'), ' ')[1], null())]",
                "startVMOnConnect": "[parameters('StartVmOnConnect')]",
                "vmTemplate": "[format('{{\"domain\":\"{0}\",\"galleryImageOffer\":null,\"galleryImagePublisher\":null,\"galleryImageSKU\":null,\"imageType\":\"CustomImage\",\"imageUri\":null,\"customImageId\":\"{1}\",\"namePrefix\":\"{2}\",\"osDiskType\":\"{3}\",\"useManagedDisks\":true,\"vmSize\":{{\"id\":\"{4}\",\"cores\":null,\"ram\":null}},\"galleryItemId\":null}}', parameters('DomainName'), parameters('ComputeGalleryImageId'), parameters('VmPrefix'), parameters('DiskSku'), parameters('VmSize'))]"
              }
            },
            {
              "type": "Microsoft.DesktopVirtualization/applicationGroups",
              "apiVersion": "2021-03-09-preview",
              "name": "[parameters('AppGroupName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "hostPoolArmPath": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('HostPoolName'))]",
                "applicationGroupType": "Desktop"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('HostPoolName'))]"
              ]
            },
            {
              "type": "Microsoft.DesktopVirtualization/workspaces",
              "apiVersion": "2021-03-09-preview",
              "name": "[parameters('WorkspaceName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "applicationGroupReferences": [
                  "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('AppGroupName'))]"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('AppGroupName'))]",
                "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('HostPoolName'))]"
              ]
            }
          ],
          "outputs": {
            "HostPoolRegistrationToken": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('HostPoolName'))).registrationInfo.token]"
            },
            "ComputeImageGalleryID": {
              "type": "string",
              "value": "[parameters('ComputeGalleryImageId')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupHP'))]"
      ]
    },
    {
      "condition": "[parameters('Monitoring')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "linked_logAnalyticsWorkspace",
      "subscriptionId": "[parameters('LogAnalyticsSubId')]",
      "resourceGroup": "[parameters('LogAnalyticsRG')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "LogAnalyticsWorkspaceName": {
            "value": "[parameters('LogAnalyticsWorkspaceName')]"
          },
          "LogAnalyticsWorkspaceRetention": {
            "value": "[parameters('LogAnalyticsWorkspaceRetention')]"
          },
          "LogAnalyticsWorkspaceSku": {
            "value": "[parameters('LogAnalyticsWorkspaceSku')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "NewLogAnalyticsWS": {
            "value": "[parameters('NewLogAnalyticsWS')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "3856346944953444143"
            }
          },
          "parameters": {
            "Location": {
              "type": "string"
            },
            "LogAnalyticsWorkspaceName": {
              "type": "string"
            },
            "LogAnalyticsWorkspaceRetention": {
              "type": "int"
            },
            "LogAnalyticsWorkspaceSku": {
              "type": "string"
            },
            "NewLogAnalyticsWS": {
              "type": "bool"
            },
            "Tags": {
              "type": "object"
            }
          },
          "variables": {
            "WindowsEvents": [
              {
                "name": "Microsoft-FSLogix-Apps/Operational",
                "types": [
                  {
                    "eventType": "Error"
                  },
                  {
                    "eventType": "Warning"
                  },
                  {
                    "eventType": "Information"
                  }
                ]
              },
              {
                "name": "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational",
                "types": [
                  {
                    "eventType": "Error"
                  },
                  {
                    "eventType": "Warning"
                  },
                  {
                    "eventType": "Information"
                  }
                ]
              },
              {
                "name": "System",
                "types": [
                  {
                    "eventType": "Error"
                  },
                  {
                    "eventType": "Warning"
                  }
                ]
              },
              {
                "name": "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin",
                "types": [
                  {
                    "eventType": "Error"
                  },
                  {
                    "eventType": "Warning"
                  },
                  {
                    "eventType": "Information"
                  }
                ]
              },
              {
                "name": "Microsoft-FSLogix-Apps/Admin",
                "types": [
                  {
                    "eventType": "Error"
                  },
                  {
                    "eventType": "Warning"
                  },
                  {
                    "eventType": "Information"
                  }
                ]
              },
              {
                "name": "Application",
                "types": [
                  {
                    "eventType": "Error"
                  },
                  {
                    "eventType": "Warning"
                  }
                ]
              }
            ],
            "WindowsPerformanceCounters": [
              {
                "objectName": "LogicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Disk Transfers/sec"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Current Disk Queue Length"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Disk Reads/sec"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "% Free Space"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk sec/Read"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Disk Writes/sec"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk sec/Write"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Free Megabytes"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "C:",
                "intervalSeconds": 60,
                "counterName": "% Free Space"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "C:",
                "intervalSeconds": 30,
                "counterName": "Avg. Disk Queue Length"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "C:",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk sec/Transfer"
              },
              {
                "objectName": "LogicalDisk",
                "instanceName": "C:",
                "intervalSeconds": 30,
                "counterName": "Current Disk Queue Length"
              },
              {
                "objectName": "Memory",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "% Committed Bytes In Use"
              },
              {
                "objectName": "Memory",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Available MBytes"
              },
              {
                "objectName": "Memory",
                "instanceName": "*",
                "intervalSeconds": 30,
                "counterName": "Available Mbytes"
              },
              {
                "objectName": "Memory",
                "instanceName": "*",
                "intervalSeconds": 30,
                "counterName": "Page Faults/sec"
              },
              {
                "objectName": "Memory",
                "instanceName": "*",
                "intervalSeconds": 30,
                "counterName": "Pages/sec"
              },
              {
                "objectName": "Network Adapter",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Bytes Sent/sec"
              },
              {
                "objectName": "Network Adapter",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Bytes Received/sec"
              },
              {
                "objectName": "Network Interface",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Bytes Total/sec"
              },
              {
                "objectName": "PhysicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk Bytes/Transfer"
              },
              {
                "objectName": "PhysicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk Bytes/Read"
              },
              {
                "objectName": "PhysicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk sec/Write"
              },
              {
                "objectName": "PhysicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk sec/Read"
              },
              {
                "objectName": "PhysicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk Bytes/Write"
              },
              {
                "objectName": "PhysicalDisk",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Avg. Disk sec/Transfer"
              },
              {
                "objectName": "PhysicalDisk",
                "instanceName": "*",
                "intervalSeconds": 30,
                "counterName": "Avg. Disk Queue Length"
              },
              {
                "objectName": "Process",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "IO Write Operations/sec"
              },
              {
                "objectName": "Process",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "IO Read Operations/sec"
              },
              {
                "objectName": "Process",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Thread Count"
              },
              {
                "objectName": "Process",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "% User Time"
              },
              {
                "objectName": "Process",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Working Set"
              },
              {
                "objectName": "Process",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "% Processor Time"
              },
              {
                "objectName": "Processor",
                "instanceName": "_Total",
                "intervalSeconds": 60,
                "counterName": "% Processor Time"
              },
              {
                "objectName": "Processor Information",
                "instanceName": "_Total",
                "intervalSeconds": 30,
                "counterName": "% Processor Time"
              },
              {
                "objectName": "RemoteFX Graphics",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Frames Skipped/Second - Insufficient Server Resources"
              },
              {
                "objectName": "RemoteFX Graphics",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Average Encoding Time"
              },
              {
                "objectName": "RemoteFX Graphics",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Frames Skipped/Second - Insufficient Client Resources"
              },
              {
                "objectName": "RemoteFX Graphics",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Frames Skipped/Second - Insufficient Network Resources"
              },
              {
                "objectName": "RemoteFX Network",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Current UDP Bandwidth"
              },
              {
                "objectName": "RemoteFX Network",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Current TCP Bandwidth"
              },
              {
                "objectName": "RemoteFX Network",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Current TCP RTT"
              },
              {
                "objectName": "RemoteFX Network",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Current UDP RTT"
              },
              {
                "objectName": "System",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Processor Queue Length"
              },
              {
                "objectName": "Terminal Services",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Inactive Sessions"
              },
              {
                "objectName": "Terminal Services",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Total Sessions"
              },
              {
                "objectName": "Terminal Services",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "Active Sessions"
              },
              {
                "objectName": "Terminal Services Session",
                "instanceName": "*",
                "intervalSeconds": 60,
                "counterName": "% Processor Time"
              },
              {
                "objectName": "User Input Delay per Process",
                "instanceName": "*",
                "intervalSeconds": 30,
                "counterName": "Max Input Delay"
              },
              {
                "objectName": "User Input Delay per Session",
                "instanceName": "*",
                "intervalSeconds": 30,
                "counterName": "Max Input Delay"
              }
            ]
          },
          "resources": [
            {
              "condition": "[parameters('NewLogAnalyticsWS')]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('LogAnalyticsWorkspaceName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('LogAnalyticsWorkspaceSku')]"
                },
                "retentionInDays": "[parameters('LogAnalyticsWorkspaceRetention')]",
                "workspaceCapping": {
                  "dailyQuotaGb": -1
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "copy": {
                "name": "windowsEvents",
                "count": "[length(variables('WindowsEvents'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[parameters('NewLogAnalyticsWS')]",
              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', parameters('LogAnalyticsWorkspaceName'), format('WindowsEvent{0}', copyIndex()))]",
              "tags": "[parameters('Tags')]",
              "kind": "WindowsEvent",
              "properties": {
                "eventLogName": "[variables('WindowsEvents')[copyIndex()].name]",
                "eventTypes": "[variables('WindowsEvents')[copyIndex()].types]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsWorkspaceName'))]"
              ]
            },
            {
              "copy": {
                "name": "windowsPerformanceCounters",
                "count": "[length(variables('WindowsPerformanceCounters'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[parameters('NewLogAnalyticsWS')]",
              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', parameters('LogAnalyticsWorkspaceName'), format('WindowsPerformanceCounter{0}', copyIndex()))]",
              "tags": "[parameters('Tags')]",
              "kind": "WindowsPerformanceCounter",
              "properties": {
                "objectName": "[variables('WindowsPerformanceCounters')[copyIndex()].objectName]",
                "instanceName": "[variables('WindowsPerformanceCounters')[copyIndex()].instanceName]",
                "intervalSeconds": "[variables('WindowsPerformanceCounters')[copyIndex()].intervalSeconds]",
                "counterName": "[variables('WindowsPerformanceCounters')[copyIndex()].counterName]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsWorkspaceName'))]",
                "windowsEvents"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsId": {
              "type": "string",
              "value": "[if(parameters('NewLogAnalyticsWS'), resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsWorkspaceName')), resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsWorkspaceName')))]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('Monitoring')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "linked_Monitoring_Setup",
      "resourceGroup": "[parameters('ResourceGroupHP')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AutomationAccountName": {
            "value": "[parameters('AutomationAccountName')]"
          },
          "HostPoolName": {
            "value": "[parameters('HostPoolName')]"
          },
          "LogAnalyticsWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('LogAnalyticsSubId'), parameters('LogAnalyticsRG')), 'Microsoft.Resources/deployments', 'linked_logAnalyticsWorkspace'), '2020-10-01').outputs.logAnalyticsId.value]"
          },
          "PooledHostPool": {
            "value": "[variables('PooledHostPool')]"
          },
          "WorkspaceName": {
            "value": "[parameters('WorkspaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "4520834864315041263"
            }
          },
          "parameters": {
            "AutomationAccountName": {
              "type": "string"
            },
            "HostPoolName": {
              "type": "string"
            },
            "LogAnalyticsWorkspaceId": {
              "type": "string"
            },
            "PooledHostPool": {
              "type": "bool"
            },
            "WorkspaceName": {
              "type": "string"
            }
          },
          "variables": {
            "HostPoolLogs": [
              {
                "category": "Checkpoint",
                "enabled": true
              },
              {
                "category": "Error",
                "enabled": true
              },
              {
                "category": "Management",
                "enabled": true
              },
              {
                "category": "Connection",
                "enabled": true
              },
              {
                "category": "HostRegistration",
                "enabled": true
              },
              {
                "category": "AgentHealthStatus",
                "enabled": true
              },
              {
                "category": "ConnectionGraphicsData",
                "enabled": true
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('WorkspaceName'))]",
              "name": "[format('diag-{0}', parameters('WorkspaceName'))]",
              "properties": {
                "logs": [
                  {
                    "category": "Checkpoint",
                    "enabled": true
                  },
                  {
                    "category": "Error",
                    "enabled": true
                  },
                  {
                    "category": "Management",
                    "enabled": true
                  },
                  {
                    "category": "Feed",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('LogAnalyticsWorkspaceId')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('HostPoolName'))]",
              "name": "[format('diag-{0}', parameters('HostPoolName'))]",
              "properties": {
                "logs": "[variables('HostPoolLogs')]",
                "workspaceId": "[parameters('LogAnalyticsWorkspaceId')]"
              }
            },
            {
              "condition": "[parameters('PooledHostPool')]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('AutomationAccountName'))]",
              "name": "[format('diag-{0}', parameters('AutomationAccountName'))]",
              "properties": {
                "logs": [
                  {
                    "category": "JobLogs",
                    "enabled": true
                  },
                  {
                    "category": "JobStreams",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('LogAnalyticsWorkspaceId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupHP')), 'Microsoft.Resources/deployments', 'linked_HostPoolDeployment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('LogAnalyticsSubId'), parameters('LogAnalyticsRG')), 'Microsoft.Resources/deployments', 'linked_logAnalyticsWorkspace')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupHP'))]"
      ]
    },
    {
      "copy": {
        "name": "virtualMachines",
        "count": "[length(range(1, variables('SessionHostBatchCount')))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('linked_VirtualMachines_{0}_{1}', sub(range(1, variables('SessionHostBatchCount'))[copyIndex()], 1), guid(parameters('Timestamp')))]",
      "resourceGroup": "[variables('DeployVMsTo')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "Availability": {
            "value": "[parameters('Availability')]"
          },
          "AvailabilitySetPrefix": {
            "value": "[variables('AvailabilitySetPrefix')]"
          },
          "ComputeGalleryImageId": {
            "value": "[format('{0}/versions/latest', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ComputeGallerySubId'), parameters('ComputeGalleryRG')), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', parameters('ComputeGalleryName'), parameters('ComputeGalleryImage')), '/')[0], split(format('{0}/{1}', parameters('ComputeGalleryName'), parameters('ComputeGalleryImage')), '/')[1]))]"
          },
          "ComputeGalleryProperties": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ComputeGallerySubId'), parameters('ComputeGalleryRG')), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', parameters('ComputeGalleryName'), parameters('ComputeGalleryImage')), '/')[0], split(format('{0}/{1}', parameters('ComputeGalleryName'), parameters('ComputeGalleryImage')), '/')[1]), '2022-03-03')]"
          },
          "DomainUser": {
            "value": "[parameters('DomainUser')]"
          },
          "DomainPassword": {
            "value": "[parameters('DomainPassword')]"
          },
          "DomainName": {
            "value": "[parameters('DomainName')]"
          },
          "HostPoolRegistrationToken": "[if(parameters('CrossTenantRegister'), createObject('value', parameters('CrossTenantRegisterToken')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupHP')), 'Microsoft.Resources/deployments', 'linked_HostPoolDeployment'), '2020-10-01').outputs.HostPoolRegistrationToken.value))]",
          "OUPath": {
            "value": "[parameters('OUPath')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "LogAnalyticsWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('LogAnalyticsSubId'), parameters('LogAnalyticsRG')), 'Microsoft.Resources/deployments', 'linked_logAnalyticsWorkspace'), '2020-10-01').outputs.logAnalyticsId.value]"
          },
          "Monitoring": {
            "value": "[parameters('Monitoring')]"
          },
          "NumSessionHosts": {
            "value": "[parameters('NumSessionHosts')]"
          },
          "Subnet": {
            "value": "[parameters('Subnet')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          },
          "Timestamp": {
            "value": "[parameters('Timestamp')]"
          },
          "UpdateWindows": {
            "value": "[parameters('UpdateWindows')]"
          },
          "VirtualNetwork": {
            "value": "[parameters('VirtualNetwork')]"
          },
          "VirtualNetworkResourceGroup": {
            "value": "[parameters('VirtualNetworkResourceGroup')]"
          },
          "VmIndexStart": {
            "value": "[parameters('VmIndexStart')]"
          },
          "VmSize": {
            "value": "[parameters('VmSize')]"
          },
          "VmUsername": {
            "value": "[parameters('VmUsername')]"
          },
          "VmPassword": {
            "value": "[parameters('VmPassword')]"
          },
          "VmPrefix": {
            "value": "[parameters('VmPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "2808412423862932285"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string"
            },
            "_artifactsLocationSasToken": {
              "type": "securestring"
            },
            "Availability": {
              "type": "string"
            },
            "AvailabilitySetPrefix": {
              "type": "string"
            },
            "ComputeGalleryImageId": {
              "type": "string"
            },
            "ComputeGalleryProperties": {
              "type": "object"
            },
            "DomainName": {
              "type": "securestring"
            },
            "DomainUser": {
              "type": "string"
            },
            "DomainPassword": {
              "type": "securestring"
            },
            "HostPoolRegistrationToken": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "LogAnalyticsWorkspaceId": {
              "type": "string"
            },
            "Monitoring": {
              "type": "bool"
            },
            "NumSessionHosts": {
              "type": "int"
            },
            "Subnet": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "Timestamp": {
              "type": "string"
            },
            "UpdateWindows": {
              "type": "bool"
            },
            "OUPath": {
              "type": "string"
            },
            "VirtualNetwork": {
              "type": "string"
            },
            "VirtualNetworkResourceGroup": {
              "type": "string"
            },
            "VmIndexStart": {
              "type": "int"
            },
            "VmPrefix": {
              "type": "string"
            },
            "VmSize": {
              "type": "string"
            },
            "VmUsername": {
              "type": "string"
            },
            "VmPassword": {
              "type": "securestring"
            }
          },
          "variables": {
            "HyperVGen": "[parameters('ComputeGalleryProperties').hyperVGeneration]",
            "Architecture": "[parameters('ComputeGalleryProperties').architecture]",
            "SecurityFeature": "[if(contains(parameters('ComputeGalleryProperties'), 'features'), filter(parameters('ComputeGalleryProperties').features, lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value, 'Standard')]"
          },
          "resources": [
            {
              "copy": {
                "name": "networkInterface",
                "count": "[length(range(0, parameters('NumSessionHosts')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-05-01",
              "name": "[format('nic-{0}{1}', parameters('VmPrefix'), padLeft(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 3, '0'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[resourceId(subscription().subscriptionId, parameters('VirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('VirtualNetwork'), parameters('Subnet'))]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false
              }
            },
            {
              "copy": {
                "name": "virtualMachine",
                "count": "[length(range(0, parameters('NumSessionHosts')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}{1}', parameters('VmPrefix'), padLeft(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 3, '0'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "zones": "[if(equals(parameters('Availability'), 'AvailabilityZones'), createArray(string(add(mod(range(0, parameters('NumSessionHosts'))[copyIndex()], 3), 1))), null())]",
              "properties": {
                "availabilitySet": "[if(equals(parameters('Availability'), 'AvailabilitySet'), createObject('id', resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', parameters('AvailabilitySetPrefix'), div(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 200)))), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('VmSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "id": "[parameters('ComputeGalleryImageId')]"
                  },
                  "osDisk": {
                    "name": "[format('osDisk-{0}{1}', parameters('VmPrefix'), padLeft(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 3, '0'))]",
                    "osType": "Windows",
                    "createOption": "FromImage",
                    "caching": "ReadOnly",
                    "deleteOption": "Delete"
                  },
                  "dataDisks": []
                },
                "osProfile": {
                  "computerName": "[format('{0}{1}', parameters('VmPrefix'), padLeft(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 3, '0'))]",
                  "adminUsername": "[parameters('VmUsername')]",
                  "adminPassword": "[parameters('VmPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}{1}', parameters('VmPrefix'), padLeft(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 3, '0')))]",
                      "properties": {
                        "deleteOption": "Delete"
                      }
                    }
                  ]
                },
                "securityProfile": {
                  "uefiSettings": "[if(equals(variables('SecurityFeature'), 'Standard'), null(), createObject('secureBootEnabled', true(), 'vTpmEnabled', true()))]",
                  "securityType": "[if(equals(variables('SecurityFeature'), 'Standard'), null(), variables('SecurityFeature'))]"
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true
                  }
                },
                "licenseType": "Windows_Client"
              },
              "dependsOn": [
                "networkInterface"
              ]
            },
            {
              "copy": {
                "name": "extension_CustomScriptExtension",
                "count": "[length(range(0, parameters('NumSessionHosts')))]"
              },
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}{1}/CustomScriptExtension', parameters('VmPrefix'), padLeft(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 3, '0'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "fileUris": [
                    "[format('{0}Register-HostPool-PostConfig.ps1{1}', parameters('_artifactsLocation'), parameters('_artifactsLocationSasToken'))]"
                  ],
                  "timestamp": "[parameters('Timestamp')]"
                },
                "protectedSettings": {
                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File Register-HostPool-PostConfig.ps1 -HostPoolRegistration {0} -WindowsUpdate {1}', parameters('HostPoolRegistrationToken'), parameters('UpdateWindows'))]"
                }
              },
              "dependsOn": [
                "virtualMachine"
              ]
            },
            {
              "copy": {
                "name": "extension_MicrosoftMonitoringAgent",
                "count": "[length(range(0, parameters('NumSessionHosts')))]"
              },
              "condition": "[parameters('Monitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}{1}/MicrosoftMonitoringAgent', parameters('VmPrefix'), padLeft(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 3, '0'))]",
              "location": "[parameters('Location')]",
              "properties": {
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "type": "MicrosoftMonitoringAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "workspaceId": "[if(parameters('Monitoring'), reference(parameters('LogAnalyticsWorkspaceId'), '2015-03-20').customerId, null())]"
                },
                "protectedSettings": {
                  "workspaceKey": "[if(parameters('Monitoring'), listKeys(parameters('LogAnalyticsWorkspaceId'), '2015-03-20').primarySharedKey, null())]"
                }
              },
              "dependsOn": [
                "extension_CustomScriptExtension",
                "virtualMachine"
              ]
            },
            {
              "copy": {
                "name": "extension_JsonADDomainExtension",
                "count": "[length(range(0, parameters('NumSessionHosts')))]"
              },
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}{1}/JsonADDomainExtension', parameters('VmPrefix'), padLeft(add(range(0, parameters('NumSessionHosts'))[copyIndex()], parameters('VmIndexStart')), 3, '0'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "forceUpdateTag": "[parameters('Timestamp')]",
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "Name": "[parameters('DomainName')]",
                  "User": "[parameters('DomainUser')]",
                  "Restart": "true",
                  "Options": "3",
                  "OUPath": "[parameters('OUPath')]"
                },
                "protectedSettings": {
                  "Password": "[parameters('DomainPassword')]"
                }
              },
              "dependsOn": [
                "extension_CustomScriptExtension",
                "extension_MicrosoftMonitoringAgent",
                "virtualMachine"
              ]
            }
          ],
          "outputs": {
            "RegistrationToken": {
              "type": "string",
              "value": "[parameters('HostPoolRegistrationToken')]"
            },
            "HyperVGen": {
              "type": "string",
              "value": "[variables('HyperVGen')]"
            },
            "Architecture": {
              "type": "string",
              "value": "[variables('Architecture')]"
            },
            "ComputeGalProp": {
              "type": "object",
              "value": "[parameters('ComputeGalleryProperties')]"
            },
            "SecurityFeatureValue": {
              "type": "string",
              "value": "[variables('SecurityFeature')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupHP')), 'Microsoft.Resources/deployments', 'linked_HostPoolDeployment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('LogAnalyticsSubId'), parameters('LogAnalyticsRG')), 'Microsoft.Resources/deployments', 'linked_logAnalyticsWorkspace')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupHP')), 'Microsoft.Resources/deployments', 'linked_Monitoring_Setup')]"
      ]
    }
  ]
}
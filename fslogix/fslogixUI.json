{
	"$schema": "https://schema.management.azure.com/schemas/2021-09-09/uiFormDefinition.schema.json",
	"view": {
		"kind": "Form",
		"properties": {
			"title": "Mission Landing Zone Add-On: Azure Virtual Desktop",
			"steps": [
				{
					"name": "basics",
					"label": "Basics",
					"elements": [
						{
							"name": "description",
							"type": "Microsoft.Common.TextBlock",
							"options": {
								"text": "The Azure Virtual Desktop (AVD) add-on reduces the complexity in deploying AVD with SCCA and zero trust compliance. Click on the link below to learn more about the solution.",
								"link": {
									"label": "https://github.com/Azure/missionlz/blob/main/src/bicep/add-ons/azureVirtualDesktop/README.md",
									"uri": "https://github.com/Azure/missionlz/blob/main/src/bicep/add-ons/azureVirtualDesktop/README.md"
								}
							}
						},
						{
							"name": "scope",
							"type": "Microsoft.Common.ResourceScope",
							"instanceDetailsLabel": "",
							"location": {
								"resourceTypes": []
							}
						},
						{
							"name": "hub",
							"label": "Hub Resources",
							"type": "Microsoft.Common.Section",
							"elements": [
								{
									"name": "api",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "subscriptions?api-version=2020-01-01"
									}
								},
								{
									"name": "subscription",
									"label": "Subscription",
									"type": "Microsoft.Common.DropDown",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "Select the subscription for your Mission Landing Zone Hub network, firewall, and remote access resources.",
									"filter": true,
									"constraints": {
										"allowedValues": "[map(steps('basics').hub.api.value, (item) => parse(concat('{\"label\":\"', item.displayName, '\",\"value\":\"', item.id, '\",\"description\":\"', 'ID: ', item.subscriptionId, '\"}')))]",
										"required": true
									}
								},
								{
									"name": "virtualNetworksApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').hub.subscription, '/providers/Microsoft.Network/virtualNetworks?api-version=2023-05-01')]"
									}
								},
								{
									"name": "virtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"visible": true,
									"label": "Virtual network",
									"defaultValue": "[filter(map(steps('basics').hub.virtualNetworksApi.value, (item) => item.name), (item) => contains(item, 'hub'))]",
									"filter": true,
									"toolTip": "Select the existing Hub virtual network.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(steps('basics').hub.virtualNetworksApi.value, (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.id, '\"}')))]"
									}
								}
							]
						},
						{
							"name": "naming",
							"type": "Microsoft.Common.Section",
							"label": "Naming Components",
							"elements": [
								{
									"name": "description",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "The values selected below will be used as components in your naming convention to name your Azure resource groups and resources. For more information on the naming convention used in this solution, refer to the documentation.",
										"link": {
											"label": "https://github.com/Azure/missionlz/blob/main/src/bicep/add-ons/azureVirtualDesktop/docs/design/naming.md",
											"uri": "https://github.com/Azure/missionlz/blob/main/src/bicep/add-ons/azureVirtualDesktop/docs/design/naming.md"
										}
									}
								},
								{
									"name": "identifier",
									"type": "Microsoft.Common.TextBox",
									"label": "Identifier",
									"toolTip": "Input a 3 character identifier for the resource group and resource names created with this solution. The identifier should represent a unique value within your organization, such as a business unit or project.",
									"placeholder": "Example: it1",
									"constraints": {
										"required": true,
										"regex": "^[a-z][a-z0-9]{1,2}$",
										"validationMessage": "The value must be 1 - 3 characters in length, alphanumeric, and lowercase."
									}
								},
								{
									"name": "environment",
									"type": "Microsoft.Common.DropDown",
									"visible": true,
									"label": "Environment Abbreviation",
									"defaultValue": "Development (dev)",
									"toolTip": "Select the target environment for the solution. The single letter environment abbreviation will be used as part of the naming convention for the resoure groups and resources.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Development (dev)",
												"value": "dev"
											},
											{
												"label": "Production (prod)",
												"value": "prod"
											},
											{
												"label": "Test (test)",
												"value": "test"
											}
										]
									}
								}
							]
						},
						{
							"name": "servicePrincipalApi",
							"type": "Microsoft.Solutions.GraphApiControl",
							"request": {
								"method": "GET",
								"path": "/v1.0/serviceprincipals?$filter=appId eq '9cdead84-a844-4324-93f2-b2e6bb768d07'"
							}
						}
					]
				},
				{
					"name": "controlPlane",
					"label": "Control Plane",
					"elements": [
						{
							"name": "controlPlane",
							"type": "Microsoft.Common.Section",
							"visible": true,
							"label": "Control Plane",
							"elements": [
								{
									"name": "locationsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/locations?api-version=2022-12-01')]"
									}
								},
								{
									"name": "providerApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.DesktopVirtualization/resourceTypes?api-version=2021-04-01')]"
									}
								},
								{
									"name": "location",
									"label": "Location",
									"type": "Microsoft.Common.DropDown",
									"defaultValue": "[steps('basics').scope.location.displayName]",
									"toolTip": "Select the location for the AVD management resources: host pool, workspace, application group, etc.",
									"filter": true,
									"constraints": {
										"allowedValues": "[map(filter(steps('controlPlane').controlPlane.locationsApi.value, (item) => contains(first(map(filter(steps('controlPlane').controlPlane.providerApi.value, (item) => equals(item.resourceType, 'hostpools')), (item) => item.locations)), item.displayName)), (item) => parse(concat('{\"label\":\"', item.displayName, '\",\"value\":\"', item.name, '\"}')))]",
										"required": true
									}
								}
							]
						},
						{
							"name": "assignment",
							"type": "Microsoft.Common.Section",
							"label": "Assignment",
							"visible": true,
							"elements": [
								{
									"name": "description",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "To access Azure Virtual Desktop, your end users will need to be assigned to the Desktop Applicaiton Group and if applicable, be given permissions on the storage service for FSLogix. Select the desired security groups below to give access to this AVD stamp. If deploying FSLogix, storage will be deployed for each group to support sharding. Be sure your groups are sized appropriately for each shard.",
										"link": {
											"label": "Learn more about FSLogix storage options for sizing your groups.",
											"uri": "https://learn.microsoft.com/azure/virtual-desktop/store-fslogix-profile"
										}
									}
								},
								{
									"name": "groupsApi",
									"type": "Microsoft.Solutions.GraphApiControl",
									"request": {
										"method": "GET",
										"path": "/v1.0/groups?$top=999"
									}
								},
								{
									"name": "groupsDropDown",
									"type": "Microsoft.Common.DropDown",
									"label": "Groups",
									"defaultValue": "",
									"toolTip": "Select the desired group(s) to give access to this AVD stamp and if applicable, the FSLogix file share.",
									"multiselect": true,
									"filter": true,
									"constraints": {
										"allowedValues": "[map(steps('controlPlane').assignment.groupsApi.value, (item) => parse(concat('{\"label\":\"', item.displayName, '\",\"value\": {\"name\":\"', item.displayName, '\",\"objectId\":\"', item.id, '\"}}')))]",
										"required": true
									},
									"visible": "[not(empty(steps('controlPlane').assignment.groupsApi))]"
								},
								{
									"name": "groupsGrid",
									"type": "Microsoft.Common.EditableGrid",
									"ariaLabel": "Input the security groups for access to AVD and if applicable, FSLogix. The object ID is a property on the group and can be found in Entra ID.",
									"label": "Security Groups",
									"visible": "[empty(steps('controlPlane').assignment.groupsApi)]",
									"constraints": {
										"width": "Full",
										"rows": {
											"count": {
												"min": 1,
												"max": 100
											}
										},
										"columns": [
											{
												"id": "name",
												"header": "Name",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "Security Group Name",
													"constraints": {
														"required": true,
														"validations": []
													}
												}
											},
											{
												"id": "objectId",
												"header": "Object ID",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "Security Group Object ID",
													"constraints": {
														"required": true,
														"validations": []
													}
												}
											}
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "hosts",
					"label": "Session Hosts",
					"elements": [
						{
							"name": "virtualMachine",
							"type": "Microsoft.Common.Section",
							"visible": true,
							"label": "Virtual Machine",
							"elements": [
								{
									"name": "availability",
									"type": "Microsoft.Common.DropDown",
									"label": "Availability Options",
									"filter": true,
									"defaultValue": "Availability Zones",
									"toolTip": "Select the redundancy / resiliency for the virtual machines.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Availability Sets",
												"value": "AvailabilitySets"
											},
											{
												"label": "Availability Zones",
												"value": "AvailabilityZones"
											},
											{
												"label": "No infrastructure redundancy required",
												"value": "None"
											}
										]
									}
								}
							]
						},
						{
							"name": "identity",
							"type": "Microsoft.Common.Section",
							"label": "Identity",
							"visible": true,
							"elements": [
								{
									"name": "solution",
									"type": "Microsoft.Common.OptionsGroup",
									"visible": true,
									"label": "Active Directory Solution",
									"defaultValue": "Active Directory Domain Services (ADDS)",
									"toolTip": "Choose the Active Directory solution that already exists.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Active Directory Domain Services (ADDS)",
												"value": "ActiveDirectoryDomainServices"
											},
											{
												"label": "Microsoft Entra ID",
												"value": "MicrosoftEntraId"
											},
											{
												"label": "Microsoft Entra Domain Services",
												"value": "MicrosoftEntraDomainServices"
											}
										]
									}
								},
								{
									"name": "domainName",
									"type": "Microsoft.Common.TextBox",
									"visible": "[not(equals(steps('hosts').identity.solution, 'MicrosoftEntraId'))]",
									"label": "Domain Name",
									"toolTip": "Provide domain name for the selected Active Directory solution.",
									"placeholder": "Example: contoso.com",
									"constraints": {
										"required": true
									}
								},
								{
									"name": "ouPath",
									"type": "Microsoft.Common.TextBox",
									"visible": "[not(equals(steps('hosts').identity.solution, 'MicrosoftEntraId'))]",
									"label": "OU Path",
									"toolTip": "Input the distinguished name of the desired organization unit for the AVD session hosts.",
									"placeholder": "Example: OU=pooled,OU=avd,DC=contoso,DC=com",
									"constraints": {
										"required": true
									}
								}
							]
						},
						{
							"name": "domainJoinCredentials",
							"type": "Microsoft.Common.Section",
							"label": "Domain Join Credentials",
							"visible": "[not(equals(steps('hosts').identity.solution, 'MicrosoftEntraId'))]",
							"elements": [
								{
									"name": "userPrincipalName",
									"type": "Microsoft.Common.TextBox",
									"label": "User Principal Name",
									"toolTip": "Enter the user principal name with domain join privileges.",
									"placeholder": "Example: xadmin@contoso.com",
									"constraints": {
										"required": true,
										"regex": "^[a-z0-9A-Z_.-]+@(?:[a-z0-9]+\\.)+[a-z]+$",
										"validationMessage": "The value must be a valid user principal name."
									}
								},
								{
									"name": "password",
									"type": "Microsoft.Common.PasswordBox",
									"label": {
										"password": "Password"
									},
									"toolTip": "Enter a password that is alphanumeric, contains at least 12 characters, 1 letter, 1 number and 1 special character.",
									"constraints": {
										"required": true
									},
									"options": {
										"hideConfirmation": true
									}
								}
							]
						},
						{
							"name": "localAdminCredentials",
							"type": "Microsoft.Common.Section",
							"visible": true,
							"label": "Local Administrator Credential",
							"elements": [
								{
									"name": "username",
									"type": "Microsoft.Common.TextBox",
									"label": "Username",
									"defaultValue": "",
									"placeholder": "Example: xadmin",
									"toolTip": "Input the username for the local administrator account.",
									"constraints": {
										"required": true,
										"regex": "",
										"validationMessage": ""
									},
									"visible": true
								},
								{
									"name": "password",
									"type": "Microsoft.Common.PasswordBox",
									"label": {
										"password": "Password",
										"confirmPassword": "Confirm Password"
									},
									"toolTip": "Input the password for the local administrator account.",
									"constraints": {
										"required": true,
										"regex": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=_!*<>()])(?=\\S+$).{12,123}$",
										"validationMessage": "The value must be within 12 to 123 characters, be alphanumeric, and include 1 lower case character, 1 upper case character, 1 number, and 1 special character that is not '\\' or '-'."
									},
									"options": {
										"hideConfirmation": false
									},
									"visible": true
								}
							]
						}
					]
				},
				{
					"name": "userProfiles",
					"label": "User Profiles",
					"elements": [
						{
							"name": "profileSolution",
							"type": "Microsoft.Common.DropDown",
							"visible": true,
							"label": "Profile Solution",
							"defaultValue": "[if(equals(steps('hosts').identity.solution, 'MicrosoftEntraId'), 'Local', 'FSLogix')]",
							"toolTip": "Select the user profile solution for your end users.",
							"constraints": {
								"required": true,
								"allowedValues": "[if(equals(steps('hosts').identity.solution, 'MicrosoftEntraId'), parse('[{\"label\":\"Local\",\"value\":\"local\"}]'), parse('[{\"label\":\"FSLogix\",\"value\":\"fslogix\"},{\"label\":\"Local\",\"value\":\"local\"}]'))]"
							}
						},
						{
							"name": "storage",
							"type": "Microsoft.Common.Section",
							"label": "Profile Storage",
							"visible": "[equals(steps('userProfiles').profileSolution, 'fslogix')]",
							"elements": [
								{
									"name": "service",
									"type": "Microsoft.Common.DropDown",
									"visible": true,
									"label": "Service",
									"defaultValue": "Azure Files",
									"toolTip": "Select the Azure storage service for the user profiles.",
									"constraints": {
										"required": true,
										"allowedValues": "[if(equals(steps('hosts').identity.solution, 'MicrosoftEntraId'), parse('[{\"label\":\"Azure Files\",\"value\":\"AzureFiles\"}]'), parse('[{\"label\":\"Azure Files\",\"value\":\"AzureFiles\"},{\"label\":\"Azure NetApp Files\",\"value\":\"AzureNetAppFiles\"}]'))]"
									}
								},
								{
									"name": "sku",
									"type": "Microsoft.Common.DropDown",
									"visible": "[equals(steps('userProfiles').profileSolution, 'fslogix')]",
									"label": "SKU",
									"defaultValue": "[if(equals(steps('userProfiles').profileSolution, 'local'), concat('Standard ', if(equals(steps('userProfiles').storage.service, 'AzureFiles'), '(20K IOPS)', '(100K IOPS)')), concat('Premium ', if(equals(steps('userProfiles').storage.service, 'AzureFiles'), '(100K IOPS)', '(450K IOPS)')))]",
									"toolTip": "Select the storage SKU for the SMB file shares to support the use of FSLogix.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "[concat('Premium ', if(equals(steps('userProfiles').storage.service, 'AzureFiles'), '(100K IOPS)', '(450K IOPS)'))]",
												"value": "Premium"
											},
											{
												"label": "[concat('Standard ', if(equals(steps('userProfiles').storage.service, 'AzureFiles'), '(20K IOPS)', '(320K IOPS)'))]",
												"value": "Standard"
											}
										]
									}
								},
								{
									"name": "fileShareSize",
									"type": "Microsoft.Common.Slider",
									"label": "File share size (GB)",
									"defaultValue": 100,
									"toolTip": "Input the quota size for the SMB file share to support the use of FSLogix.",
									"min": 100,
									"max": 100000,
									"showStepMarkers": false,
									"constraints": {
										"required": true
									},
									"visible": "[equals(steps('userProfiles').profileSolution, 'fslogix')]"
								},
								{
									"name": "fslogixContainerType",
									"type": "Microsoft.Common.DropDown",
									"visible": "[equals(steps('userProfiles').profileSolution, 'fslogix')]",
									"label": "FSLogix solution",
									"defaultValue": "Profile Container",
									"toolTip": "Select the solution for the FSLogix profiles.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Cloud Cache, Profile Container",
												"value": "CloudCacheProfileContainer"
											},
											{
												"label": "Cloud Cache, Profile & Office Container",
												"value": "CloudCacheProfileOfficeContainer"
											},
											{
												"label": "Profile Container",
												"value": "ProfileContainer"
											},
											{
												"label": "Profile & Office Container",
												"value": "ProfileOfficeContainer"
											}
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "networking",
					"label": "Networking",
					"elements": [
						{
							"name": "controlPlane",
							"label": "[if(equals(steps('basics').scope.location.name, steps('controlPlane').controlPlane.location), 'Control Plane & Session Hosts', 'Control Plane')]",
							"type": "Microsoft.Common.Section",
							"visible": true,
							"elements": [
								{
									"name": "virtualNetworkAddressCidrRange",
									"label": "Virtual network CIDR range",
									"type": "Microsoft.Common.TextBox",
									"defaultValue": "[concat('10.0.1', '.0/24')]",
									"toolTip": "Specify an address CIDR range within the range [10,26].",
									"constraints": {
										"required": true,
										"validations": [
											{
												"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-4]))$",
												"message": "Invalid CIDR range. The address prefix must be in the range [10,24]."
											}
										]
									}
								},
								{
									"name": "subnetAddressCidrRangeWorkload",
									"label": "Subnet CIDR range (Workload)",
									"type": "Microsoft.Common.TextBox",
									"defaultValue": "[concat('10.0.1', '.0/2', if(and(equals(steps('basics').scope.location.name, steps('controlPlane').controlPlane.location), equals(steps('userProfiles').storage.service, 'AzureNetAppFiles')), '5', '4'))]",
									"toolTip": "Specify a CIDR range for the workload subnet within the AVD spoke virtual network range [24,28].",
									"constraints": {
										"required": true,
										"validations": [
											{
												"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(2[4-8]))$",
												"message": "Invalid CIDR range. The address prefix must be in the range [24,28]."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), 8), equals(last(take(split(first(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), '.'), 1)), last(take(split(first(split(steps('networking').controlPlane.subnetAddressCidrRangeWorkload, '/')), '.'), 1))), true)]",
												"message": "CIDR range not within virtual network CIDR range (first octet)."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), 16), equals(last(take(split(first(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), '.'), 2)), last(take(split(first(split(steps('networking').controlPlane.subnetAddressCidrRangeWorkload, '/')), '.'), 2))), true)]",
												"message": "CIDR range not within virtual network CIDR range (second octet)."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), 24), equals(last(take(split(first(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), '.'), 3)), last(take(split(first(split(steps('networking').controlPlane.subnetAddressCidrRangeWorkload, '/')), '.'), 3))), true)]",
												"message": "CIDR range not within virtual network CIDR range (third octet)."
											},
											{
												"isValid": "[lessOrEquals(last(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), last(split(steps('networking').controlPlane.subnetAddressCidrRangeWorkload, '/')))]",
												"message": "CIDR range not within virtual network CIDR range (subnet mask)."
											}
										]
									}
								},
								{
									"name": "subnetAddressCidrRangeAnf",
									"label": "Subnet CIDR range (Azure NetApp Files)",
									"type": "Microsoft.Common.TextBox",
									"visible": "[and(equals(steps('basics').scope.location.name, steps('controlPlane').controlPlane.location), equals(steps('userProfiles').storage.service, 'AzureNetAppFiles'))]",
									"defaultValue": "[concat('10.0.1', '.128/25')]",
									"toolTip": "Specify a CIDR range for the Azure NetApp Files subnet within the AVD spoke virtual network range [24,28].",
									"constraints": {
										"required": true,
										"validations": [
											{
												"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(2[4-8]))$",
												"message": "Invalid CIDR range. The address prefix must be in the range [24,28]."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), 8), equals(last(take(split(first(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), '.'), 1)), last(take(split(first(split(steps('networking').controlPlane.subnetAddressCidrRangeAnf, '/')), '.'), 1))), true)]",
												"message": "CIDR range not within virtual network CIDR range (first octet)."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), 16), equals(last(take(split(first(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), '.'), 2)), last(take(split(first(split(steps('networking').controlPlane.subnetAddressCidrRangeAnf, '/')), '.'), 2))), true)]",
												"message": "CIDR range not within virtual network CIDR range (second octet)."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), 24), equals(last(take(split(first(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), '.'), 3)), last(take(split(first(split(steps('networking').controlPlane.subnetAddressCidrRangeAnf, '/')), '.'), 3))), true)]",
												"message": "CIDR range not within virtual network CIDR range (third octet)."
											},
											{
												"isValid": "[lessOrEquals(last(split(steps('networking').controlPlane.virtualNetworkAddressCidrRange, '/')), last(split(steps('networking').controlPlane.subnetAddressCidrRangeAnf, '/')))]",
												"message": "CIDR range not within virtual network CIDR range (subnet mask)."
											}
										]
									}
								}
							]
						},
						{
							"name": "hosts",
							"label": "Session Hosts",
							"type": "Microsoft.Common.Section",
							"visible": "[not(equals(steps('basics').scope.location.name, steps('controlPlane').controlPlane.location))]",
							"elements": [
								{
									"name": "virtualNetworkAddressCidrRange",
									"label": "Virtual network CIDR range",
									"type": "Microsoft.Common.TextBox",
									"defaultValue": "[concat('10.0.1', '.0/24')]",
									"toolTip": "Specify an address CIDR range within the range [10,24].",
									"constraints": {
										"required": true,
										"validations": [
											{
												"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-4]))$",
												"message": "Invalid CIDR range. The address prefix must be in the range [10,24]."
											}
										]
									}
								},
								{
									"name": "subnetAddressCidrRangeWorkload",
									"label": "Subnet CIDR range (Workload)",
									"type": "Microsoft.Common.TextBox",
									"defaultValue": "[concat('10.0.1', '.0/2', if(equals(steps('userProfiles').storage.service, 'AzureNetAppFiles'), '5', '4'))]",
									"toolTip": "Specify a CIDR range for the default subnet within the AVD Hosts spoke virtual network range [24,28].",
									"constraints": {
										"required": true,
										"validations": [
											{
												"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(2[4-8]))$",
												"message": "Invalid CIDR range. The address prefix must be in the range [24,28]."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), 8), equals(last(take(split(first(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), '.'), 1)), last(take(split(first(split(steps('networking').hosts.subnetAddressCidrRangeWorkload, '/')), '.'), 1))), true)]",
												"message": "CIDR range not within virtual network CIDR range (first octet)."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), 16), equals(last(take(split(first(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), '.'), 2)), last(take(split(first(split(steps('networking').hosts.subnetAddressCidrRangeWorkload, '/')), '.'), 2))), true)]",
												"message": "CIDR range not within virtual network CIDR range (second octet)."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), 24), equals(last(take(split(first(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), '.'), 3)), last(take(split(first(split(steps('networking').hosts.subnetAddressCidrRangeWorkload, '/')), '.'), 3))), true)]",
												"message": "CIDR range not within virtual network CIDR range (third octet)."
											},
											{
												"isValid": "[lessOrEquals(last(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), last(split(steps('networking').hosts.subnetAddressCidrRangeWorkload, '/')))]",
												"message": "CIDR range not within virtual network CIDR range (subnet mask)."
											}
										]
									}
								},
								{
									"name": "subnetAddressCidrRangeAnf",
									"label": "Subnet CIDR range (Azure NetApp Files)",
									"type": "Microsoft.Common.TextBox",
									"visible": "[and(not(equals(steps('basics').scope.location.name, steps('controlPlane').controlPlane.location)), equals(steps('userProfiles').storage.service, 'AzureNetAppFiles'))]",
									"defaultValue": "[concat('10.0.1', '.128/25')]",
									"toolTip": "Specify a CIDR range for the Azure NetApp Files subnet within the AVD spoke virtual network range [24,28].",
									"constraints": {
										"required": true,
										"validations": [
											{
												"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(2[4-8]))$",
												"message": "Invalid CIDR range. The address prefix must be in the range [24,28]."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), 8), equals(last(take(split(first(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), '.'), 1)), last(take(split(first(split(steps('networking').hosts.subnetAddressCidrRangeAnf, '/')), '.'), 1))), true)]",
												"message": "CIDR range not within virtual network CIDR range (first octet)."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), 16), equals(last(take(split(first(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), '.'), 2)), last(take(split(first(split(steps('networking').hosts.subnetAddressCidrRangeAnf, '/')), '.'), 2))), true)]",
												"message": "CIDR range not within virtual network CIDR range (second octet)."
											},
											{
												"isValid": "[if(greaterOrEquals(last(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), 24), equals(last(take(split(first(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), '.'), 3)), last(take(split(first(split(steps('networking').hosts.subnetAddressCidrRangeAnf, '/')), '.'), 3))), true)]",
												"message": "CIDR range not within virtual network CIDR range (third octet)."
											},
											{
												"isValid": "[lessOrEquals(last(split(steps('networking').hosts.virtualNetworkAddressCidrRange, '/')), last(split(steps('networking').hosts.subnetAddressCidrRangeAnf, '/')))]",
												"message": "CIDR range not within virtual network CIDR range (subnet mask)."
											}
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "management",
					"label": "Management",
					"elements": [
						{
							"name": "backup",
							"type": "Microsoft.Common.Section",
							"label": "Backup",
							"visible": "[or(equals(steps('userProfiles').profileSolution, 'local'), and(equals(steps('userProfiles').profileSolution, 'fslogix'), equals(steps('userProfiles').storage.service, 'AzureFiles')))]",
							"elements": [
								{
									"name": "recoveryServices",
									"type": "Microsoft.Common.CheckBox",
									"visible": true,
									"label": "Enable recovery services?",
									"defaultValue": false,
									"toolTip": "Choose to deploy backups for your solution. For a personal host pool, this will enable backups on the virtual machines. For a pooled host pool, this will enable backups on the FSLogix file share when using Azure Files."
								}
							]
						},
						{
							"name": "monitoring",
							"type": "Microsoft.Common.Section",
							"label": "Monitoring",
							"visible": true,
							"elements": [
								{
									"name": "enable",
									"type": "Microsoft.Common.CheckBox",
									"visible": true,
									"label": "Enable monitoring for AVD Insights?",
									"defaultValue": false,
									"toolTip": "Deploy the required resources to enable AVD Insights."
								},
								{
									"name": "enableSecurity",
									"type": "Microsoft.Common.CheckBox",
									"visible": "[steps('management').monitoring.enable]",
									"label": "Multi-home agent for security monitoring?",
									"defaultValue": false,
									"toolTip": "Deploy the required configuration to multi-home the Microsoft Monitoring Agent for security monitoring."
								},
								{
									"name": "logAnalyticsWorkspace",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Existing Log Analytics Workspace for Security",
									"visible": "[and(steps('management').monitoring.enable),steps('management').monitoring.enableSecurity)]",
									"resourceType": "Microsoft.OperationalInsights/workspaces",
									"toolTip": "Select the log analytics workspace used for collecting security data for Sentinel or Defender for Cloud. This is required to multihome the Microsoft Monitoring Agent.",
									"options": {}
								}
							]
						}
					]
				},
				{
					"name": "artifacts",
					"label": "Artifacts",
					"elements": [
						{
							"name": "storage",
							"type": "Microsoft.Common.Section",
							"label": "Artifacts storage",
							"elements": [
								{
									"name": "description",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Select the storage account and container that hosts the artifacts required to deploy this solution."
									}
								},
								{
									"name": "storageAccount",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Existing storage account",
									"resourceType": "Microsoft.Storage/storageAccounts",
									"options": {
										"filter": {
											"subscription": "all",
											"location": "all"
										}
									}
								},
								{
									"name": "containerApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('artifacts').storage.storageAccount.id, '/blobServices/default/containers?api-version=2023-01-01')]"
									}
								},
								{
									"name": "container",
									"type": "Microsoft.Common.DropDown",
									"visible": true,
									"label": "Existing container",
									"defaultValue": "",
									"filter": true,
									"toolTip": "Select the existing container containing the required artifacts.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(steps('artifacts').storage.containerApi.value, (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.name, '\"}')))]"
									}
								}
							],
							"visible": true
						},
						{
							"name": "files",
							"type": "Microsoft.Common.Section",
							"label": "Artifacts file names",
							"elements": [
								{
									"name": "description",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Input the file names for the required artifacts from the specified Azure Blobs container above."
									}
								},
								{
									"name": "azurePowerShellModuleMsiName",
									"type": "Microsoft.Common.TextBox",
									"label": "Azure PowerShell Module Installer (.msi)",
									"defaultValue": "Az-Cmdlets-10.2.0.37547-x64.msi",
									"toolTip": "Input the file / blob name for the Azure PowerShell Module installer.",
									"placeholder": "",
									"multiLine": false,
									"constraints": {
										"required": true,
										"validations": [
											{
												"isValid": "[endsWith(steps('artifacts').files.azurePowerShellModuleMsiName, '.msi')]",
												"message": "The file name must end with '.msi'."
											}
										]
									},
									"visible": true
								},
								{
									"name": "filesWarning",
									"type": "Microsoft.Common.InfoBox",
									"visible": true,
									"options": {
										"style": "Warning",
										"text": "The files listed above are prerequisites for this solution. They must be downloaded and staged in Azure Blob storage. Once staged, ensure the file names listed above match the file names in Azure Blob storage since the names can change over time. Refer to the following link to download the files:",
										"uri": {
											"text": "https://github.com/Azure/missionlz/blob/main/src/bicep/add-ons/azureVirtualDesktop/docs/prerequisites.md#required",
											"value": "https://github.com/Azure/missionlz/blob/main/src/bicep/add-ons/azureVirtualDesktop/docs/prerequisites.md#required"
										}
									}
								}
							]
						}
					]
				},
				{
					"name": "tags",
					"label": "Tags",
					"elements": [
						{
							"name": "tags",
							"type": "Microsoft.Common.TagsByResource",
							"resources": [
								"Microsoft.Automation/automationAccounts",
								"Microsoft.Compute/availabilitySets",
								"Microsoft.Compute/diskAccesses",
								"Microsoft.Compute/diskEncryptionSets",
								"Microsoft.Compute/virtualMachines",
								"Microsoft.Insights/dataCollectionRules",
								"Microsoft.KeyVault/vaults",
								"Microsoft.ManagedIdentity/userAssignedIdentities",
								"Microsoft.NetApp/netAppAccounts",
								"Microsoft.Network/networkInterfaces",
								"Microsoft.Network/networkSecurityGroups",
								"Microsoft.Network/privateEndpoints",
								"Microsoft.Network/routeTables",
								"Microsoft.Network/virtualNetworks",
								"Microsoft.OperationalInsights/workspaces",
								"Microsoft.RecoveryServices/vaults",
								"Microsoft.Resources/resourceGroups",
								"Microsoft.Storage/storageAccounts"
							]
						}
					]
				}
			]
		},
		"outputs": {
			"parameters": {
				"activeDirectorySolution": "[steps('hosts').identity.solution]",
				"artifactsContainerName": "[steps('artifacts').storage.container]",
				"artifactsStorageAccountResourceId": "[steps('artifacts').storage.storageAccount.id]",
				"availability": "[steps('hosts').virtualMachine.availability]",
				"azurePowerShellModuleMsiName": "[steps('artifacts').files.azurePowerShellModuleMsiName.blobName]",
				"azureNetAppFilesSubnetAddressPrefix": "[if(and(equals(steps('basics').scope.location.name, steps('controlPlane').controlPlane.location), equals(steps('userProfiles').storage.service, 'AzureNetAppFiles')), steps('networking').controlPlane.subnetAddressCidrRangeAnf, steps('networking').hosts.subnetAddressCidrRangeAnf)]",
				"domainJoinPassword": "[steps('hosts').domainJoinCredentials.password]",
				"domainJoinUserPrincipalName": "[steps('hosts').domainJoinCredentials.userPrincipalName]",
				"domainName": "[steps('hosts').identity.domainName]",
				"environmentAbbreviation": "[steps('basics').naming.environment]",
				"fslogixShareSizeInGB": "[if(equals(steps('userProfiles').profileSolution, 'local'), 100, steps('userProfiles').storage.fileShareSize)]",
				"fslogixContainerType": "[steps('userProfiles').storage.fslogixContainerType]",
				"fslogixStorageService": "[if(equals(steps('userProfiles').profileSolution, 'local'), 'None', concat( steps('userProfiles').storage.service, ' ', steps('userProfiles').storage.sku))]",
				"hubVirtualNetworkResourceId": "[steps('basics').hub.virtualNetwork]",
				"identifier": "[steps('basics').naming.identifier]",
				"locationControlPlane": "[steps('controlPlane').controlPlane.location]",
				"locationVirtualMachines": "[steps('basics').scope.location.name]",
				"logAnalyticsWorkspaceRetention": 30,
				"logAnalyticsWorkspaceSku": "PerGB2018",
				"monitoring": "[steps('management').monitoring.enable]",
				"organizationalUnitPath": "[if(equals(steps('hosts').identity.solution, 'MicrosoftEntraId'), '', steps('hosts').identity.ouPath)]",
				"recoveryServices": "[steps('management').backup.recoveryServices]",
				"securityLogAnalyticsWorkspaceResourceId": "[if(steps('management').monitoring.enableSecurity, steps('management').monitoring.logAnalyticsWorkspace.id, '')]",
				"securityPrincipals": "[if(empty(steps('controlPlane').assignment.groupsApi), steps('controlPlane').assignment.groupsGrid, steps('controlPlane').assignment.groupsDropDown)]",
				"sessionHostIndex": 0,
				"storageCount": "[if(equals(steps('userProfiles').profileSolution, 'local'), 0, if(empty(steps('controlPlane').assignment.groupsApi), length(steps('controlPlane').assignment.groupsGrid), length(steps('controlPlane').assignment.groupsDropDown)))]",
				"storageIndex": 0,
				"subnetAddressPrefixes": "[if(equals(steps('basics').scope.location.name, steps('controlPlane').controlPlane.location), parse(concat('[\"', steps('networking').controlPlane.subnetAddressCidrRangeWorkload, '\"]')), parse(concat('[\"', steps('networking').controlPlane.subnetAddressCidrRangeWorkload, '\", \"', steps('networking').hosts.subnetAddressCidrRangeWorkload, '\"]')))]",
				"tags": "[steps('tags').tags]",
				"virtualMachinePassword": "[steps('hosts').localAdminCredentials.password]",
				"virtualMachineUsername": "[steps('hosts').localAdminCredentials.username]",
				"virtualNetworkAddressPrefixes": "[if(equals(steps('basics').scope.location.name, steps('controlPlane').controlPlane.location), parse(concat('[\"', steps('networking').controlPlane.virtualNetworkAddressCidrRange, '\"]')), parse(concat('[\"', steps('networking').controlPlane.virtualNetworkAddressCidrRange, '\", \"', steps('networking').hosts.virtualNetworkAddressCidrRange, '\"]')))]"
			},
			"kind": "Subscription",
			"location": "[steps('basics').scope.location.name]",
			"subscriptionId": "[steps('basics').scope.subscription.id]"
		}
	}
}